{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","GlobalStyle.js","App.js","serviceWorker.js","index.js"],"names":["StyledForm","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","done","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","onClick","content","Container","div","Buttons","toggleHideDone","setAllDone","length","disabled","every","StyledSection","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","className","StyledContainer","main","children","GlobalStyle","createGlobalStyle","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.327056fb.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: 767px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: hsl(180, 100%, 25%);\r\n    color: #fff;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        background: hsl(180, 100%, 30%);\r\n    transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        background: hsl(180, 100%, 35%);\r\n    }\r\n`;","import React, {useState} from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  \r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (!trimmedNewTaskContent){\r\n      return;\r\n    }\r\n\r\n    addNewTask(trimmedNewTaskContent);\r\n    setNewTaskContent(\"\");\r\n  }; \r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input \r\n        value={newTaskContent} \r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({target}) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: #fff;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n        background: hsl(120, 61%, 34%);\r\n    \r\n        &:hover {\r\n            background: hsl(120, 61%, 39%);\r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background: hsl(348, 83%, 47%);\r\n    \r\n        &:hover {\r\n            background: hsl(348, 83%, 52%);\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item \r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => toggleTaskDone(task.id)} \r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button \r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                  X\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: hsl(180, 100%, 25%);\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: #ccc;\r\n    }\r\n`;","import React from \"react\";\r\nimport { Container, Button } from \"./styled\";\r\n\r\nconst Buttons = ({tasks, hideDone, toggleHideDone, setAllDone}) => (\r\n    tasks.length > 0 && (\r\n        <Container>\r\n            <Button \r\n                onClick={toggleHideDone}\r\n            >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n            </Button>\r\n            <Button\r\n                onClick={setAllDone}\r\n                disabled={ tasks.every(({ done }) => done)}\r\n            >\r\n                Ukończ wszystkie\r\n            </Button>\r\n        </Container>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: #fff;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { StyledSection, Header, Title, Body } from \"./styled\"; \r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <Title className=\"section__title\">{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n        font-family: 'Roboto', sans-serif;\r\n        background: #eee;\r\n    }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nconst getInitialTasks = () => {\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n\n  return tasksFromLocalStorage\n      ? JSON.parse(tasksFromLocalStorage)\n      : []\n};\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  \n\n  const [tasks, setTasks] = useState(getInitialTasks);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if(task.id === id) {\n        return {...task, done: !task.done};\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task, done: true\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks, \n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n  \n  return (\n    <Container>\n      <GlobalStyle />\n      <Header title=\"Lista zadań\" />\n      <Section \n        title=\"Dodaj nowe zadanie\" \n        body={ <Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks \n          tasks={tasks} \n          hideDone={hideDone} \n          removeTask={removeTask}\n          toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons \n          tasks={tasks} \n          hideDone={hideDone} \n          toggleHideDone={toggleHideDone} \n          setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}