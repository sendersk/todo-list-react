{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","useTasks.js","features/tasks/Tasks.js","App.js","serviceWorker.js","theme.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Input","input","alto","Button","button","teal","white","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","InputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","TaskList","removeTask","useSelector","map","task","key","onClick","Wrapper","div","silver","Buttons","setAllDone","length","disabled","every","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","className","main","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","Tasks","setTasks","useEffect","setItem","stringify","filter","addNewTask","useTasks","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","black","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33c1f547.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n        font-family: 'Roboto', sans-serif;\r\n        background: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({tasks}, {payload}) => {\r\n            const index = tasks.findIndex(({id}) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import React, {useState, useRef} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const InputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (!trimmedNewTaskContent){\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    InputRef.current.focus();\r\n  }; \r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input \r\n        ref={InputRef}\r\n        value={newTaskContent} \r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({target}) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen}; \r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport { selectTasks, toggleTaskDone } from \"../tasksSlice\";\r\n\r\nconst TaskList = ({ removeTask }) => {\r\n    const {tasks, hideDone} = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        (\r\n            <List>\r\n                {tasks.map(task => (\r\n                    <Item \r\n                        key={task.id}\r\n                        hidden={task.done && hideDone}\r\n                    >\r\n                        <Button\r\n                            toggleDone\r\n                            onClick={() => dispatch(toggleTaskDone(task.id))} \r\n                        >\r\n                            {task.done ? \"✔\" : \"\"}\r\n                        </Button>\r\n                        <Content done={task.done}>\r\n                            {task.content}\r\n                        </Content>\r\n                        <Button \r\n                            remove\r\n                            onClick={() => removeTask(task.id)}\r\n                        >\r\n                          X\r\n                        </Button>\r\n                    </Item>\r\n                ))}\r\n            </List>\r\n        )\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport { selectTasks, toggleHideDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = ({ setAllDone }) => {\r\n    const {tasks, hideDone} = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Wrapper>    \r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button \r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={setAllDone}\r\n                        disabled={ tasks.every(({ done }) => done)}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\"; \r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title className=\"section__title\">{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import { useEffect, useState } from \"react\";\r\n\r\nconst getInitialTasks = () => {\r\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n  return tasksFromLocalStorage ? JSON.parse(tasksFromLocalStorage) : [];\r\n};\r\n\r\nexport const useTasks = () => {\r\n  const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const removeTask = (id) => {\r\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done };\r\n        }\r\n\r\n        return task;\r\n      })\r\n    );\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => ({\r\n        ...task,\r\n        done: true,\r\n      }))\r\n    );\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks((tasks) => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return {\r\n    tasks,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    addNewTask,\r\n  };\r\n};\r\n","import React from 'react';\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport { useTasks } from \"../../useTasks\";\n\nfunction Tasks() {\n  const {\n    removeTask,\n    setAllDone,\n  } = useTasks();\n  \n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section \n        title=\"Dodaj nowe zadanie\" \n        body={ <Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <TaskList \n          removeTask={removeTask}\n          />\n        }\n        extraHeaderContent={\n          <Buttons \n          setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\"; \nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}