{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Input","input","alto","Button","button","teal","white","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","removeTask","taskId","index","findIndex","id","splice","toggleHideDone","state","toggleTaskDone","done","setAllDone","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","Form","useState","newTaskContent","setNewTaskContent","InputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","TaskList","useSelector","map","key","onClick","Wrapper","div","silver","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","className","main","Container","children","Tasks","Boolean","window","location","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5c2fccf.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n        font-family: 'Roboto', sans-serif;\r\n        background: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        removeTask: ({tasks}, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({tasks}, {payload}) => {\r\n            const index = tasks.findIndex(({id}) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        setAllDone: ({tasks}) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: () => {\r\n\r\n        },\r\n        setTasks: (state, {payload: tasks}) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, removeTask, toggleHideDone, toggleTaskDone, setAllDone, fetchExampleTasks, setTasks } = tasksSlice.actions;\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport default tasksSlice.reducer;","import React, {useState, useRef} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const InputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (!trimmedNewTaskContent){\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    InputRef.current.focus();\r\n  }; \r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input \r\n        ref={InputRef}\r\n        value={newTaskContent} \r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({target}) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen}; \r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport {\r\n  selectTasks,\r\n  removeTask,\r\n  toggleTaskDone,\r\n  selectHideDone,\r\n} from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(({ id, content, done }) => (\r\n        <Item key={id} hidden={done && hideDone}>\r\n          <Button toggleDone onClick={() => dispatch(toggleTaskDone(id))}>\r\n            {done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={done}>{content}</Content>\r\n          <Button remove onClick={() => dispatch(removeTask(id))}>\r\n            X\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport { selectAreTasksEmpty, toggleHideDone, setAllDone, selectIsEveryTaskDone, selectHideDone, fetchExampleTasks } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>    \r\n            <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                Pobierz przykładowe zadania\r\n            </Button>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\"; \r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title className=\"section__title\">{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n  \n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section \n        title=\"Dodaj nowe zadanie\" \n        body={ <Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={\n          <Buttons />\n        }\n        body={\n          <TaskList />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, delay, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, setTasks, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\"; \nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}