{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","routes.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/FetchExampleTasksButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/about/AboutPage.js","Navigation/styled.js","Navigation/index.js","App.js","serviceWorker.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Button","button","teal","white","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","removeTask","taskId","index","findIndex","id","splice","toggleHideDone","state","toggleTaskDone","done","editTask","content","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","input","alto","Form","useState","newTaskContent","setNewTaskContent","InputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","current","focus","Input","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","edit","save","remove","crimson","StyledLink","Link","EditableContent","div","ContentInput","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","editableId","setEditableId","newTaskName","setNewTaskName","map","onClick","as","autoFocus","undefined","onEditSave","to","Wrapper","silver","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","className","main","Container","children","replaceQueryParameter","history","useHistory","searchParams","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","FetchExampleTasksButton","Search","TaskPage","useParams","find","getTaskById","StyledNavLink","NavLink","attrs","activeClassName","Navigation","path","AboutPage","Boolean","window","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd6f21a3.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n        font-family: 'Roboto', sans-serif;\r\n        background: ${({ theme }) => theme.color.gallery};\r\n        text-transform: uppercase;\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        removeTask: ({tasks}, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({tasks}, {payload}) => {\r\n            const index = tasks.findIndex(({id}) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        editTask: ({tasks}, {payload: {id, content}}) => {\r\n            const index = tasks.findIndex((task) => task.id === id);\r\n            tasks[index].content = content;\r\n        },\r\n        setAllDone: ({tasks}) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n     addTask, \r\n     removeTask, \r\n     toggleHideDone, \r\n     toggleTaskDone, \r\n     editTask,\r\n     setAllDone, \r\n     fetchExampleTasks, \r\n     fetchExampleTasksSuccess, \r\n     fetchExampleTasksError, \r\n} = tasksSlice.actions;\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) => \r\n    selectTasks(state).find(({id}) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if(!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return selectTasks(state).filter(({content}) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;","import React, {useState, useRef} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Button } from \"./styled\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const InputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (!trimmedNewTaskContent){\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    InputRef.current.focus();\r\n  }; \r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={InputRef}\r\n        value={newTaskContent} \r\n        placeholder=\"Write your task here\"\r\n        onChange={({target}) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Submit</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen}; \r\n    `}\r\n\r\n    ${({edit}) => edit && css`\r\n        background-color: #f5bd22;\r\n    `}\r\n\r\n    ${({save}) => save && css`\r\n        background-color: #f5bd22;\r\n        font-size: unset;\r\n        width: unset;\r\n        padding: 0 10px;\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({theme}) => theme.color.teal};\r\n    transition: 0.3s;\r\n    text-transform: none;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const EditableContent = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n`;\r\n\r\nexport const ContentInput = styled.input`\r\n    width: 100%;\r\n    padding: 5px;\r\n    border: 1px solid yellow;\r\n    background-color: white;\r\n    color: grey;\r\n`;","export const toTasks = () => \"/tasks\";\r\nexport const toAbout = () => \"/about\";\r\n\r\nexport const toTask = ({id} = {id: \":id\"}) => `/tasks/${id}`;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button, StyledLink, EditableContent, ContentInput } from \"./styled\";\r\nimport {\r\n  selectTasksByQuery,\r\n  removeTask,\r\n  editTask,\r\n  toggleTaskDone,\r\n  selectHideDone,\r\n} from \"../../tasksSlice\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\n\r\nconst TaskList = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const [editableId, setEditableId] = useState(0);\r\n  const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onEditSave = (id, content) => {\r\n    dispatch(\r\n      editTask({\r\n        content: newTaskName.trim() || content,\r\n        id,\r\n      })\r\n    );\r\n\r\n    setEditableId(undefined);\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(({ id, content, done }) => (\r\n        <Item key={id} hidden={done && hideDone}>\r\n          <Button toggleDone onClick={() => dispatch(toggleTaskDone(id))}>\r\n            {done ? \"✔\" : \"\"}\r\n          </Button>\r\n          {editableId === id ? (\r\n            <EditableContent as=\"form\">\r\n              <ContentInput\r\n                autoFocus\r\n                value={newTaskName}\r\n                onChange={({target}) => setNewTaskName(target.value)}      \r\n              />\r\n              <Button save onClick={() => onEditSave(id, content)}>\r\n                Save\r\n              </Button>\r\n            </EditableContent>\r\n          ) : (\r\n            <EditableContent>\r\n              <Content done={done}>\r\n                <StyledLink to={toTask({ id: id })}>{content}</StyledLink>\r\n              </Content>\r\n              <Button\r\n                edit\r\n                onClick={() => setEditableId(id) || setNewTaskName(content)}\r\n              >\r\n                Edit\r\n              </Button>\r\n            </EditableContent>\r\n          )}\r\n          <Button remove onClick={() => dispatch(removeTask(id))}>\r\n            X\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","export default \"szukaj\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;\r\n\r\nexport default Button;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { Button } from \"../Button\";\r\nimport { selectAreTasksEmpty, toggleHideDone, setAllDone, selectIsEveryTaskDone, selectHideDone } from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper> \r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Show\" : \"Hide\"} done\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Set all as done\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n    text-transform: none;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\"; \r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title className=\"section__title\">{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Input from \"../../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport {Wrapper} from \"./styled\";\r\n\r\nexport default () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Search for task here\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport Button from \"../Button\";\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n\r\n    return (\r\n        <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n            {\r\n                loading \r\n                    ? \"Loading...\"\r\n                    : \"Download example tasks\"\r\n            }\r\n        </Button>\r\n    );\r\n};","import React from 'react';\nimport Form from \"./Form\";\nimport TaskList from \"../TasksPage/TaskList\";\nimport Buttons from \"../TasksPage/Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from './Search';\nimport FetchExampleTasksButton from \"../TasksPage/FetchExampleTasksButton/index\";\n\nfunction TasksPage() {\n  return (\n    <Container>\n      <Header title=\"Tasks List\" />\n      <Section \n        title=\"Add new task\" \n        extraHeaderContent={ <FetchExampleTasksButton /> }\n        body={ <Form />}\n      />\n      <Section \n        title=\"Search for task\" \n        body={ <Search />}\n      />\n      <Section\n        title=\"Task list\"\n        extraHeaderContent={\n          <Buttons />\n        }\n        body={\n          <TaskList />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default TasksPage;\n","import React from 'react';\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport {useParams} from \"react-router-dom\"; \r\nimport { useSelector } from 'react-redux';\r\nimport {getTaskById} from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const {id} = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n  \r\n  return (\r\n    <Container>\r\n      <Header title=\"Task details\" />\r\n      <Section \r\n        title={task ? task.content : \"Task not found.\"} \r\n        body={!!task && (\r\n          <>\r\n            <strong>Finished:</strong> {task.done ? \"Yes\" : \"No\"}\r\n          </>\r\n        )}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TaskPage;\r\n","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\n\r\n\r\nexport default () => (\r\n  <Container>\r\n    <Header title=\"About\" />\r\n    <Section \r\n        title=\"Description\" \r\n        body={<>This is a simple task list created for educational purposes. The current version includes adding tasks, marking the selected ones as completed and the possibility of removing the selected task. It also contains button to show/hide completed tasks and mark all tasks as completed. Tasks will be saved in local storage memory of your browser. </>} \r\n    />\r\n  </Container>\r\n);\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const List = styled.ul`\r\n    background-color: ${({theme}) => theme.color.teal};\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    list-style: none;\r\n    padding: 20px;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    font-size: 20px;\r\n    text-decoration: none;\r\n    background-color: ${({theme}) => theme.color.teal};\r\n    color: ${({theme}) => theme.color.white};\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n\r\n    &.${activeClassName} {\r\n        filter: brightness(120%);\r\n        border-bottom: 3px solid ${({theme}) => theme.color.white};\r\n        font-weight: bold;\r\n    }\r\n`;","import React from \"react\";\r\nimport { toAbout, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\nexport default () => {\r\n  return (\r\n    <nav>\r\n      <List>\r\n        <Item>\r\n          <StyledNavLink to={toTasks()}>Tasks list</StyledNavLink>\r\n        </Item>\r\n        <Item>\r\n          <StyledNavLink to={toAbout()}>About</StyledNavLink>\r\n        </Item>\r\n      </List>\r\n    </nav>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport AboutPage from \"./features/about/AboutPage\";\r\nimport { toAbout, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n      <Navigation />\r\n      \r\n      <Switch>\r\n        <Route path={toTask()}>\r\n          <TaskPage />\r\n        </Route>\r\n        <Route path={toTasks()}>\r\n          <TasksPage />\r\n        </Route>\r\n        <Route path={toAbout()}>\r\n          <AboutPage />\r\n        </Route>\r\n        <Route>\r\n          <Redirect to={toTasks()} />\r\n        </Route>\r\n      </Switch>\r\n  </HashRouter>\r\n);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, delay, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, fetchExampleTasksSuccess, fetchExampleTasksError, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\"; \nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}